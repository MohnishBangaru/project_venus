[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ui-venus-mobile-crawler"
version = "1.0.0"
description = "Intelligent Android app crawler using UI-Venus model for maximum coverage"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mohnish Bangaru", email = "mohnish@example.com"},
]
maintainers = [
    {name = "Mohnish Bangaru", email = "mohnish@example.com"},
]
keywords = [
    "android", "automation", "ui-venus", "crawling", "mobile", "ai", "computer-vision"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0,<3.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",
    
    # UI-Venus model integration
    "torch>=2.0.0,<3.0.0",
    "torchvision>=0.15.0,<1.0.0",
    "transformers>=4.30.0,<5.0.0",
    "accelerate>=0.20.0,<1.0.0",
    "sentencepiece>=0.1.99",
    "huggingface-hub>=0.16.0",
    "safetensors>=0.3.0",
    
    # Android automation
    "uiautomator2>=3.0.0",
    "pure-python-adb>=0.3.0",
    "opencv-python>=4.8.0,<5.0.0",
    "Pillow>=10.0.0",
    "numpy>=1.24.0,<2.0.0",
    
    # HTTP and API
    "requests>=2.31.0,<3.0.0",
    "httpx>=0.24.0,<1.0.0",
    
    # Reporting
    "reportlab>=4.0.0,<5.0.0",
    
    # Utilities
    "PyYAML>=6.0.0",
    "tqdm>=4.65.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "faker>=19.0.0,<20.0.0",
    "black>=23.0.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "types-requests>=2.31.0",
    "types-Pillow>=10.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.0.0,<10.0.0",
]

# GPU acceleration (optional)
gpu = [
    "nvidia-ml-py3>=7.352.0",
]

# Advanced image processing (optional)
image = [
    "scikit-image>=0.21.0",
]

# Machine learning utilities (optional)
ml = [
    "scikit-learn>=1.3.0",
]

# All optional dependencies
all = [
    "ui-venus-mobile-crawler[dev,docs,gpu,image,ml]",
]

[project.urls]
Homepage = "https://github.com/MohnishBangaru/project_venus"
Documentation = "https://github.com/MohnishBangaru/project_venus/docs"
Repository = "https://github.com/MohnishBangaru/project_venus.git"
Issues = "https://github.com/MohnishBangaru/project_venus/issues"
Changelog = "https://github.com/MohnishBangaru/project_venus/blob/main/CHANGELOG.md"

[project.scripts]
venus-crawler = "scripts.venus_crawler:cli"
venus-setup = "scripts.setup_device:setup_device"
venus-analyze = "scripts.analyze_results:analyze_results"
venus-config-demo = "scripts.config_demo:main"

# =============================================================================
# TOOL CONFIGURATION
# =============================================================================

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*", "scripts*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

# =============================================================================
# BLACK CODE FORMATTING
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# =============================================================================
# ISORT IMPORT SORTING
# =============================================================================

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "config", "scripts"]
known_third_party = ["torch", "transformers", "pydantic", "click", "rich"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# =============================================================================
# FLAKE8 LINTING
# =============================================================================

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
]

# =============================================================================
# MYPY TYPE CHECKING
# =============================================================================

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "uiautomator2.*",
    "pure_python_adb.*",
    "cv2.*",
    "PIL.*",
    "numpy.*",
    "torch.*",
    "transformers.*",
    "accelerate.*",
    "sentencepiece.*",
    "huggingface_hub.*",
    "safetensors.*",
    "reportlab.*",
    "rich.*",
    "loguru.*",
    "click.*",
    "pydantic.*",
    "pytest.*",
    "factory_boy.*",
    "faker.*",
]
ignore_missing_imports = true

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=config",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "device: marks tests that require a physical device",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================

[tool.coverage.run]
source = ["src", "config"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# =============================================================================
# PRE-COMMIT CONFIGURATION
# =============================================================================

[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"}
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.5.1",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-requests", "types-Pillow"]}
        ]
    }
]
